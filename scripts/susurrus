#!/usr/bin/env python
import argparse
import glob
import json
import os

import openai
import whisper

prompt_templates = {
    "title": """
Write a descriptive title for the following voice memo:
BEGIN VOICE MEMO:
{text}
END VOICE MEMO:
Descriptive Title:
""",
    "summary": """
Write a summary for the following voice memo:
BEGIN VOICE MEMO:
{text}
END VOICE MEMO:
Summary:
""",
    "action_items": """
Extract action items from the following voice memo:
BEGIN VOICE MEMO:
{text}
END VOICE MEMO:
Action Items:
""",
}


def main(model_name, path, extras):
    """Get all of the audio .mp3 files and process one by one"""
    print("Loading model", model_name)
    model = whisper.load_model(model_name)
    print("Model loaded")

    if extras == "all":
        extras = ",".join(prompt_templates.keys())

    for audio_file in glob.glob(os.path.join(path, "*.mp3")):
        output_file = audio_file.replace(".mp3", ".json")
        print("Processing", audio_file, "to", output_file)
        # Transcribe or load existing file
        if os.path.exists(output_file):
            results = json.load(open(output_file))
        else:
            results = model.transcribe(audio_file)
        # Process extra steps with language model
        for extra in extras.split(","):
            assert extra in prompt_templates, f"Unknown extra: {extra}"
            if extra not in results:
                prompt = prompt_templates[extra].format(text=results["text"])
                try:
                    completion = openai.Completion.create(
                        engine="text-davinci-003", prompt=prompt, max_tokens=256
                    )
                    results[extra] = completion.choices[0].text
                except openai.error.InvalidRequestError:
                    continue
        # Save results
        with open(output_file, "w") as f:
            json.dump(results, f)
    print("Done!")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", type=str, default="base.en", help="Whisper model")
    parser.add_argument("--path", type=str, required=True, help="Path to audio files")
    parser.add_argument("--extras", type=str, default="all", help="Extra processing")
    parser.add_argument("--shutdown", action="store_true", help="Shutdown when done")
    parser.add_argument("--openai-key", type=str, default="", help="OpenAI API key")
    args = parser.parse_args()

    if args.openai_key:
        openai.api_key = args.openai_key

    main(args.model, args.path, args.extras)

    if args.shutdown:
        os.system("sudo shutdown")
